// On importe la librairie faker pour gÃ©nÃ©rer des donnÃ©es fictives rÃ©alistes
import { faker } from "@faker-js/faker";

// On importe notre connexion Ã  la base de donnÃ©es dÃ©finie dans db.js
import db from "./db.js";

// Fonction asynchrone pour gÃ©nÃ©rer un certain nombre de 10 missions 

const generateMissions = async (count = 10) => {
  // Boucle qui va sâ€™exÃ©cuter "count" fois pour insÃ©rer plusieurs missions
  for (let i = 0; i < count; i++) {
    // GÃ©nÃ©ration dâ€™un titre alÃ©atoire 
    const title = faker.company.catchPhrase();

    // GÃ©nÃ©ration dâ€™une description alÃ©atoire avec lorem
    const description = faker.lorem.sentence();

    // GÃ©nÃ©ration dâ€™une date alÃ©atoire dans le futur
    const date_mission = faker.date.future();

    // ID dâ€™association associÃ© Ã  la mission je commence avec id=1
    const association_id = 1;

    // RequÃªte SQL prÃ©parÃ©e pour insÃ©rer une mission, la fonction insrt into ajoute une nouvelle ligne dans la table mission
    const sql = `
      INSERT INTO missions (title, description, date_mission, association_id)
      VALUES (?, ?, ?, ?)
    `;

    // ExÃ©cution de la requÃªte SQL avec les valeurs gÃ©nÃ©rÃ©es.j'attends la fin d'une insertion avant de passer a la suivante
    //et si ca ne fonctionne pas, il envoie une erreur sinon il continu
    await new Promise((resolve, reject) => {
      db.query(sql, [title, description, date_mission, association_id], (err) => {
        if (err) return reject(err); // Si erreur â†’ rejeter la promesse
        resolve(); // Sinon â†’ marquer la requÃªte comme terminÃ©e
      });
    });

    // Affiche dans la console chaque mission insÃ©rÃ©e avec succÃ¨s
    console.log(`âœ… Mission "${title}" insÃ©rÃ©e`);
  }

  // ğŸ”‘ TrÃ¨s important : fermer la connexion une fois toutes les insertions terminÃ©es
  db.end();
};

// On appelle la fonction pour insÃ©rer 20 missions dans la base de donnÃ©es
generateMissions(20);
